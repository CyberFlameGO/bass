; load dependencies
(use (.strings)
     (*dir*/img/images *dir*)
     (.git images:git-bootstrap))

; root of the git repository
(def *root*
  *dir*)

; clones the repo and checks out the given sha
(defn checkout [sha]
  (git:github/vito/bass/sha/ sha))

(provide [auth-release]
  (use (git:github/vito/tabs/ref/main/gh/release))

  ; returns the github release
  (defn auth-release [token]
    (release:auth "vito/bass" token)))

(provide [build tests docs]
  ; runs a quick sanity check
  (defn check-binary [binary image]
    (run (from image
           ($ $binary --version)))

    (if (succeeds? (from image
                     ($ ldd $binary)))
      (error "binary is not statically linked")
      :ok))

  (defn tar-czf [tarname dir & files]
    (-> ($ tar -C $dir -czf $tarname & $files)
        (with-image images:deps)
        (subpath tarname)))

  (defn zip [zipname dir & files]
    (-> ($ zip (../ zipname) & $files)
        (with-image images:deps)
        (with-dir dir)
        (subpath zipname)))

  (defn archive [out os arch]
    (let [prefix (str "bass." os "-" arch)
          tgz-path (string->fs-path (str prefix ".tgz"))
          zip-path (string->fs-path (str prefix ".zip"))]
      (case os
        "linux"
        (do
          ; check that the binary works in a few common images
          (map (fn [image] (check-binary out/bass image))
               images:smoke-tests)

          (tar-czf tgz-path out ./bass))

        "darwin"
        (tar-czf tgz-path out ./bass)

        "windows"
        (zip zip-path out ./bass))))

  (defn go-deps [src]
    (from images:deps
      ; cache these separately as they don't change often
      ($ cp src/go.mod src/go.sum ./)
      ($ go mod download)))

  (defn git-trim [src thunk]
    (-> thunk
        (with-dir src)
        (with-image images:deps)
        (read :raw)
        next
        trim))

  (defn ldflags [src version]
    (let [ref (git-trim src ($ git rev-list "-1" --abbrev-commit HEAD))
          clean? (empty? (git-trim src ($ git status --porcelain)))
          date (git-trim src ($ git show --no-patch --no-notes "--pretty=%cs" HEAD))]
      (strings:join
        " "
        [(str "-X 'main.Version=" version "'")
         (str "-X 'main.Commit=" ref (if clean? "" "*") "'")
         (str "-X 'main.Date=" date "'")])))

  (use (*root*/pkg/runtimes/shim/shims *root*))

  ; builds shims for all supported platforms using project-wide Go deps
  (defn build-shims []
    (shims:all *dir*/go.mod *dir*/go.sum))

  ; compiles a bass binary for the given platform and puts it in an archive
  (defn build [src version os arch]
    (-> ($ go build
           -o ../out/bass
           -trimpath
           -ldflags (ldflags src version)
           ./cmd/bass)
        (with-image (go-deps src)) ; TODO: match this to os/arch?
        (with-dir ./src/)
        (with-mount src ./src/)
        (with-mount (build-shims) ./src/pkg/runtimes/bin/)
        (with-env {:GOOS os :GOARCH arch :CGO_ENABLED "0"})
        (subpath ./out/)
        (archive os arch)))

  (defn with-deps [src test-thunk]
    (from (go-deps src)
      ; install bass
      ($ tar -zxf (build src "dev" "linux" "amd64") -C /bin/)

      (-> (wrap-cmd test-thunk ./hack/with-deps) ; TODO: maybe swap the order here

          (with-mount src ./src/)
          (with-mount (build-shims) ./src/pkg/runtimes/bin/)
          (with-dir ./src/)

          ; runtime tests currently need elevated privileges
          insecure!

          ; cache state to reduce Docker API calls
          (with-mount /bass-cache/buildkit/ /var/lib/buildkit/))))

  ; returns a directory containing the built docs HTML
  (defn docs [src]
    (subpath
      (with-deps src
        ($ ./docs/scripts/build ../out/))
      ./out/))

  ; returns a thunk that will run the tests and return cover.html
  (defn tests [src testflags]
    (from (with-deps src
            ($ gotestsum --format standard-verbose --no-color=false --jsonfile ../tests.log
               --
               -cover
               -coverprofile ../cover.out
               -covermode count
               & $testflags))

      ; report slow tests
      ($ gotestsum tool slowest --jsonfile ./tests.log --threshold "500ms")

      ; generate coverage report
      (cd src ($ go tool cover -html ../cover.out -o ../cover.html)))))

; checks that the nix flake + build can run successfully
(defn nix-checks [src]
  (from images:nix-flakes
    (cd src
      ($ nix flake metadata)
      ($ nix flake check)
      ($ nix build))))

; all dependencies are tracked here, so run this to populate bass.lock
(defn main []
  (log "ok"))
