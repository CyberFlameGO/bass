; load dependencies
(use (.strings)
     (*dir*/nix/images)
     (.git images:git-bootstrap))

; root of the git repository
(def *root*
  *dir*)

; clones the repo and checks out the given sha
(defn checkout [sha]
  (git:github/vito/bass/sha/ sha))

; returns the path to the release notes for the given version
(defn release-notes [src version]
  (src/notes/ (string->fs-path (str version ".md"))))

(provide [auth-release]
  (use (git:github/vito/tabs/ref/main/gh/release))

  ; returns the github release
  (defn auth-release [token]
    (release:auth "vito/bass" token)))

(provide [build smoke-test tests docs]
  ; compiles a bass binary for the given platform and puts it in an archive
  (defn build [src version os arch]
    (let [staged (from (make src version os arch)
                   ($ make "DESTDIR=./out/" install))]
      (archive src staged/out/ os arch)))

  ; returns a thunk with the make targets built into the output directory, as
  ; an overlay of src
  (defn make [src version os arch]
    (-> ($ make -j (str "GOOS=" os) (str "GOARCH=" arch))
        (with-mount src ./)
        (with-image (images:go-deps src))))

  ; creates an archive appropriate for the given platform
  (defn archive [src out os arch]
    (let [prefix (str "bass." os "-" arch)
          tgz-path (string->fs-path (str prefix ".tgz"))
          zip-path (string->fs-path (str prefix ".zip"))]
      (if (= os "windows")
        (zip src zip-path out ./bass)
        (tar-czf src tgz-path out ./bass))))

  (defn tar-czf [src tarname dir & files]
    (-> ($ tar -C $dir -czf $tarname & $files)
        (with-image (images:deps src))
        (subpath tarname)))

  (defn zip [src zipname dir & files]
    (-> ($ zip (../ zipname) & $files)
        (with-image (images:deps src))
        (with-dir dir)
        (subpath zipname)))

  ; runs a quick sanity check
  (defn check-dist [dist image]
    (let [unpacked (from image
                     ($ tar -zxf $dist))]
      (run (from unpacked
             ($ ./bass --version)))
      (if (succeeds? (from unpacked
                       ($ ldd ./bass)))
        (error "binary is not statically linked")
        :ok)))

  ; runs a basic sanity check, ensuring the binary runs in a handful of
  ; platforms
  ;
  ; in reality this only checks the Linux binary since there are no
  ; Windows/Darwin runtimes yet
  (defn smoke-test [dist]
    (map (fn [image] (check-dist dist image))
         images:smoke-tests))

  (defn with-deps [src test-thunk]
    (-> test-thunk
        (wrap-cmd ./hack/with-deps) ; TODO: maybe swap the order here
        (with-image (make src "dev" "linux" "amd64"))
        ; runtime tests currently need elevated privileges
        insecure!))

  ; returns a directory containing the built docs HTML
  (defn docs [src]
    (subpath
      (with-deps src
        ($ ./docs/scripts/build ../out/))
      ./out/))

  ; returns a thunk that will run the tests and return cover.html
  (defn tests [src testflags]
    (from (with-deps src
            ($ gotestsum --format standard-verbose --no-color=false --jsonfile ./tests.log
               --
               -cover
               -coverprofile ./cover.out
               -covermode count
               & $testflags))

      ; report slow tests
      ($ gotestsum tool slowest --jsonfile ./tests.log --threshold "500ms")

      ; generate coverage report
      ($ go tool cover -html ./cover.out -o ./cover.html))))

; checks that the nix flake + build can run successfully
(defn nix-checks [src]
  (from images:nix-flakes
    (cd src
      ($ nix flake metadata)
      ($ nix flake check)
      ($ nix build))))

; all dependencies are tracked here, so run this to populate bass.lock
(defn main []
  (log "ok"))
