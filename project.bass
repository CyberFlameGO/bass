; file for memoized dependency resolution
(def *memos* *dir*/bass/bass.lock)

; load dependencies
(use (.git (linux/alpine/git))
     (*dir*/bass/bass.bass)
     (*dir*/bass/util.bass)
     (git:github/vito/bass-loop/ref/main/bass/github.bass))

; standard suite of validations for the repo
(defn checks [src]
  {:build-linux (util:ls (bass:build src "dev" "linux" "amd64"))
   :build-darwin (util:ls (bass:build src "dev" "darwin" "amd64")
                     (bass:build src "dev" "darwin" "arm64"))
   :build-windows (util:ls (bass:build src "dev" "windows" "amd64"))
   :docs (util:ls (bass:docs src))
   :test (bass:tests src ["./..."])
   :nix (bass:nix-checks src)})

(def !token!
  (mask *env*:GITHUB_TOKEN :github-token))

; called by bass-loop
(defn github-hook [event client]
  (case event
    ; when a release is created, upload the assets
    {:name "release"
     :payload {:action "created"
               :release {:tag_name tag
                         :target_commitish target
                         :created_at created-at}
               :repository {:clone_url clone-url}}}
    (let [src (git:checkout clone-url target)
          release (bass:release !token!)
          assets (bass:release-assets src tag)]
      (release:upload! tag assets))

    _
    (github:check-hook event client git checks)))
