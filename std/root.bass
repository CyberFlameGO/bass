; This module bootstraps the ground environment with basic language facilities.
_

; evaluate a sequence, returning the last value
(def do
  ((wrap
     (op (do2) _
       (do2
         (def aux
           (op (head . tail) env
             (if (empty? tail)
               (eval head env)
               (do2
                 (eval head env)
                 (eval (cons aux tail) env)))))
         (op body env
           (if (empty? body)
             null
             (eval (cons aux body) env))))))
   (op (first second) env
     ((wrap (op _ _ (eval second env)))
      (eval first env)))))

; construct a list from a sequence of values
(def list (wrap (op x _ x)))

; prepend a sequence of values to a list given as the final argument
(def list*
  (wrap
    (op args _
      (do
        (def aux
          (wrap
            (op ((head . tail)) _
              (if (empty? tail)
                head
                (cons head (aux tail))))))
        (aux args)))))

; return the first value in a pair
;
; Typically the head of a linked list.
(def first (wrap (op ((f . _)) _ f)))

; return the second value in a pair
;
; Typically the tail of a linked list.
(def rest (wrap (op ((_ . r)) _ r)))

; return the length of the given list
(def length
  (wrap
    (op (x) _
        (if (empty? x)
          0
          (+ 1 (length (rest x)))))))

; construct an operative
;
; An operative is a combiner that is called with unevaluated arguments and the
; caller's dynamic environment.
;
; Operatives are used to define new syntactic constructs.
(def op
  ((wrap
     (op (op) _
         (op (formals eformal . body) env
           (eval [op formals eformal
                  (if (> (length body) 1)
                    (cons do body)
                    (first body))]
                 env))))
   op))

; construct an operative and bind it to a symbol
;
; Returns the bound symbol. Write a comment before (defop) to provide
; documentation.
(def defop
  (op (name formals eformal . body) env
    (eval [def name [op formals eformal . body]] env)))

; construct a function
;
; Functions are applicative combiners which evaluate their arguments before
; passing them to an underlying operative.
(defop fn (formals . body) env
  (wrap (eval [op formals _ . body] env)))

; construct a function and bind it to a symbol
;
; Returns the bound symbol. Write a comment before (defn) to provide
; documentation.
(defop defn (name formals . body) env
  (eval [def name [fn formals . body]] env))

; return the second member of a linked list
(defn second [(_ x . _)]   x)

; return third member of a linked list
(defn third  [(_ _ x . _)] x)

; return the current environment
(defop get-current-env _ e e)
