(provide
  (
   *default-config*

   defresource
   resource
   get-latest

   run-task

   image-resource
   get-image-resource
   get-latest-image-resource
  )
  ; a convenient mapping from type keywords to their image
  (def *core-types*
    {:registry-image "concourse/registry-image-resource"
     :docker-image "concourse/docker-image-resource"
     :git "concourse/git-resource"
     :time "concourse/time-resource"})

  ; the default configuration, if none is supplied on *stdin*
  (def *default-config*
    {:platforms {:linux linux}
     :types *core-types*})

  (def *config*
    (next *stdin* *default-config*))

  ; constructs a resource commandline interpreter
  ;
  ; If type is a keyword, it is mapped to an image via :types in the module
  ; configuration.
  ;
  ; Otherwise, it is passed along to `in-image`.
  (defn resource [type source]
    (def image
      (if (keyword? type)
        (-> *config* :types type)
        type))

    (defn check [version]
      (-> (/opt/resource/check {:source source :version version})
          (in-image image)))

    (defn get [version params]
      (-> (/opt/resource/in {:source source :version version :params params})
          (with-args ./)
          (in-image image)))

    (defn put [params]
      (-> (/opt/resource/out {:source source :params params})
          (with-args ./)
          (in-image image)))

    ; TODO: alternatively, define an env and return it
    (fn cmdline
      (case cmdline
        [.check]
        (apply stream (next (run (check null))))

        [.check version]
        (apply stream (next (run (check version))))

        [.get version & params]
        (path (get version (list->object params)) ./)

        [.get-metadata version & params]
        (:metadata (next (run (get version (list->object params)))))

        [.put & params]
        (next (run (put version (list->object params)))))))

  ; defines a resource
  (defop defresource [name type source] env
    (eval [def name [resource type source]] env))

  ; gets the latest version of a resource
  (defn get-latest [r & kwargs]
    (r .get (last (r .check)) & kwargs))

  (def yaml
    (load (.yaml)))

  ; run a task with the given parameters
  ;
  ; The :inputs param provides as a mapping from name to workload path.
  ;
  ; Returns an object with :outputs bound to a mapping from name to workload
  ; path, and :result bound to the workload's stream.
  (defn run-task [config-path & kwargs]
    (let [config (yaml:decode config-path)
          opts (list->object kwargs)
          workload (task->workload config opts)

          output-configs (:outputs config [])
          output-pairs (map (fn [output]
                              (let [name (:name output)
                                    src (:path output name)]
                                [(string->keyword name)
                                 (path workload (string->dir src))]))
                            output-configs)
          outputs (list->object (apply append output-pairs))]
      {:outputs outputs
       :result (run workload)}))

  (defn task->workload [config opts]
    (let [platform-name (string->keyword (-> config :platform))
          platform (-> *config* :platforms platform-name)

          image-type-name (string->keyword (-> config :image-resource :type))
          image-type (-> *config* :types image-type-name)
          image-source (-> config :image-resource :source)
          image-params (-> config :image-resource (:params {}) object->list)
          image-version (-> config :image-resource (:version null))
          image-resource (resource image-type image-source)
          image (if image-version
                  (get-image-resource image-resource version & image-params)
                  (get-latest-image-resource image-resource & image-params))

          run-path (string->path (-> config :run :path))
          run-args (-> config :run (:args []))
          run-dir (string->dir (-> config :run (:dir ".")))

          privileged (:privileged opts false)

          provided-inputs (:inputs opts {})
          configured-inputs (:inputs config)
          mounts (filter id (map (fn [i] (input-mount provided-inputs i))
                                 configured-inputs))

          configured-params (:params config {})
          provided-params (:params opts {})
          env (reduce-kv (fn [r k v] (assoc r k (if (null? v) "" v)))
                         {}
                         (merge configured-params provided-params))]
      (-> (run-path)
          (with-args & run-args)
          (in-dir run-dir)
          (with-mounts mounts)
          (with-env env)
          (on-platform platform)
          (in-image image)
          (with-insecure privileged)
          (response-from :exit))))

  (defn image-resource [resource]
    (let [fetched (get-latest resource :format "oci")]
      fetched/image.tar))

  (defn get-latest-image-resource [resource & params]
    (let [got (get-latest resource :format "oci" & params)]
      got/image.tar))

  (defn get-image-resource [resource version & kwargs]
    (let [got (resource .get version :format "oci" & params)]
      got/image.tar))

  (defn input-mount [inputs input]
    (let [name (:name input)
          input-name (string->keyword name)
          source (input-name inputs)]
      (if source
        {:source source
         :target (-> input (:path name) string->dir)}
        null))))
