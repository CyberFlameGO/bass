; sets the :insecure field of the thunk to true
;
; => (insecure! (.boom))
(defn insecure! [thunk]
  (with-insecure thunk true))

(provide ($)
  (defn resolve-arg [a scope]
    (if (symbol? a)
      (let [word (symbol->string a)
            start (substring word 0 1)]
        (if (= start "$")
          (eval (string->symbol (substring word 1)) scope)
          (eval word scope)))
      (eval a scope)))

  (defn resolve-cmd [a scope]
    (let [val (resolve-arg a scope)]
      (if (string? val)
        (string->cmd-path val)
        val)))

  (defn resolve-args [args scope]
    (case args
      [] []
      [a & as] (cons (resolve-arg a scope)
                     (resolve-args as scope))
      splat (resolve-arg splat scope)))

  ; constructs a thunk with args
  ;
  ; Symbol arguments are automatically converted to strings. Symbols beginning
  ; with $ are resolved to their binding with the leading $ removed.
  ;
  ; => ($ sh -c "echo Hello, world!")
  (defop $ [cmd & args] scope
    (let [c (resolve-cmd cmd scope)
          as (resolve-args args scope)]
      (with-args (c) as))))

; chain a sequence of thunks starting from an initial image
;
; => (from (linux/alpine) ($ echo "Hello, world!"))
^:indent
(defn from [image & thunks]
  (foldl (fn [base cmd] (with-image cmd base)) image thunks))

; chain a sequence of thunks with a given working directory
;
; Shorthand for setting (with-mount dir ./) in the first thunk and chaining
; them with (from).
;
; Typically used within an outer (from) which sets the first thunk's image in
; order to join it into the chain.
;
; => (from (linux/alpine) (cd *dir* ($ find ./)))
^:indent
(defn cd [dir thunk & thunks]
  (apply from (cons (with-mount thunk dir ./) thunks)))

; prepend a command + args to a thunk's command + args
;
; Replaces the thunk's run path sets its args to and prepend-args prepended to
; the original cmd + args.
;
; => (wrap-cmd ($ go test "./...") .strace "-f")
(defn wrap-cmd [thunk cmd & args]
  (-> thunk
      (with-cmd cmd)
      (with-args (append args (cons (thunk-cmd thunk)
                                    (thunk-args thunk))))))

(provide [image-resolver linux]
  (defn join [delim strs]
    (case strs
      [] ""
      [s] s
      [s & ss] (str s delim (join delim ss))))

  (defn image-resolver [resolve' platform names]
    (fn optional
      (case optional
        []
        (resolve'
          {:platform platform
           :repository (join "/" names)
           :tag "latest"})

        [arg]
        (cond
          ; platform
          (scope? arg)
          (image-resolver resolve' arg names)

          ; tag
          (or (symbol? arg) (string? arg))
          (resolve' {:platform platform
                     :repository (join "/" names)
                     :tag (str arg)})

          ; registry host or repository path
          (path? arg)
          (image-resolver resolve' platform (conj names (path-name arg)))

          true
          (error "invalid image path segment" :segment tag-or-path)))))

  (defop memo-resolve [] scope
    (let [memos (:*memos* scope null)]
      (if (null? memos)
        resolve
        (memo memos (.run) :resolve))))

  ; a path root for resolving Linux images
  ;
  ; Memoizes image resolution into the caller's *memos*, if set.
  ;
  ; => (linux/ubuntu)
  ;
  ; => (linux/ubuntu :18.04)
  ;
  ; => (linux/docker.io/library/ubuntu :18.04)
  (defop linux args scope
    (eval [[image-resolver [memo-resolve] {:os "linux"} []] & args] scope)))
