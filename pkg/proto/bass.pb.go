// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.3
// source: bass.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmbedFS int32

const (
	EmbedFS_INVALID  EmbedFS = 0
	EmbedFS_STDLIB   EmbedFS = 1
	EmbedFS_PKG      EmbedFS = 2
	EmbedFS_TESTDATA EmbedFS = 3
	EmbedFS_DEMOS    EmbedFS = 4
)

// Enum value maps for EmbedFS.
var (
	EmbedFS_name = map[int32]string{
		0: "INVALID",
		1: "STDLIB",
		2: "PKG",
		3: "TESTDATA",
		4: "DEMOS",
	}
	EmbedFS_value = map[string]int32{
		"INVALID":  0,
		"STDLIB":   1,
		"PKG":      2,
		"TESTDATA": 3,
		"DEMOS":    4,
	}
)

func (x EmbedFS) Enum() *EmbedFS {
	p := new(EmbedFS)
	*p = x
	return p
}

func (x EmbedFS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmbedFS) Descriptor() protoreflect.EnumDescriptor {
	return file_bass_proto_enumTypes[0].Descriptor()
}

func (EmbedFS) Type() protoreflect.EnumType {
	return &file_bass_proto_enumTypes[0]
}

func (x EmbedFS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmbedFS.Descriptor instead.
func (EmbedFS) EnumDescriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{0}
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Value_NullValue
	//	*Value_BoolValue
	//	*Value_IntValue
	//	*Value_StringValue
	//	*Value_SecretValue
	//	*Value_EmptyValue
	//	*Value_PairValue
	//	*Value_ScopeValue
	//	*Value_FilePathValue
	//	*Value_DirPathValue
	//	*Value_HostPathValue
	//	*Value_FsPathValue
	//	*Value_ThunkValue
	//	*Value_ThunkPathValue
	//	*Value_CommandPathValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{0}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetNullValue() *Null {
	if x, ok := x.GetValue().(*Value_NullValue); ok {
		return x.NullValue
	}
	return nil
}

func (x *Value) GetBoolValue() *Bool {
	if x, ok := x.GetValue().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return nil
}

func (x *Value) GetIntValue() *Int {
	if x, ok := x.GetValue().(*Value_IntValue); ok {
		return x.IntValue
	}
	return nil
}

func (x *Value) GetStringValue() *String {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Value) GetSecretValue() *Secret {
	if x, ok := x.GetValue().(*Value_SecretValue); ok {
		return x.SecretValue
	}
	return nil
}

func (x *Value) GetEmptyValue() *Empty {
	if x, ok := x.GetValue().(*Value_EmptyValue); ok {
		return x.EmptyValue
	}
	return nil
}

func (x *Value) GetPairValue() *Pair {
	if x, ok := x.GetValue().(*Value_PairValue); ok {
		return x.PairValue
	}
	return nil
}

func (x *Value) GetScopeValue() *Scope {
	if x, ok := x.GetValue().(*Value_ScopeValue); ok {
		return x.ScopeValue
	}
	return nil
}

func (x *Value) GetFilePathValue() *FilePath {
	if x, ok := x.GetValue().(*Value_FilePathValue); ok {
		return x.FilePathValue
	}
	return nil
}

func (x *Value) GetDirPathValue() *DirPath {
	if x, ok := x.GetValue().(*Value_DirPathValue); ok {
		return x.DirPathValue
	}
	return nil
}

func (x *Value) GetHostPathValue() *HostPath {
	if x, ok := x.GetValue().(*Value_HostPathValue); ok {
		return x.HostPathValue
	}
	return nil
}

func (x *Value) GetFsPathValue() *FSPath {
	if x, ok := x.GetValue().(*Value_FsPathValue); ok {
		return x.FsPathValue
	}
	return nil
}

func (x *Value) GetThunkValue() *Thunk {
	if x, ok := x.GetValue().(*Value_ThunkValue); ok {
		return x.ThunkValue
	}
	return nil
}

func (x *Value) GetThunkPathValue() *ThunkPath {
	if x, ok := x.GetValue().(*Value_ThunkPathValue); ok {
		return x.ThunkPathValue
	}
	return nil
}

func (x *Value) GetCommandPathValue() *CommandPath {
	if x, ok := x.GetValue().(*Value_CommandPathValue); ok {
		return x.CommandPathValue
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_NullValue struct {
	NullValue *Null `protobuf:"bytes,1,opt,name=null_value,json=nullValue,proto3,oneof"`
}

type Value_BoolValue struct {
	BoolValue *Bool `protobuf:"bytes,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Value_IntValue struct {
	IntValue *Int `protobuf:"bytes,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue *String `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_SecretValue struct {
	SecretValue *Secret `protobuf:"bytes,5,opt,name=secret_value,json=secretValue,proto3,oneof"`
}

type Value_EmptyValue struct {
	EmptyValue *Empty `protobuf:"bytes,6,opt,name=empty_value,json=emptyValue,proto3,oneof"`
}

type Value_PairValue struct {
	PairValue *Pair `protobuf:"bytes,7,opt,name=pair_value,json=pairValue,proto3,oneof"`
}

type Value_ScopeValue struct {
	ScopeValue *Scope `protobuf:"bytes,8,opt,name=scope_value,json=scopeValue,proto3,oneof"`
}

type Value_FilePathValue struct {
	FilePathValue *FilePath `protobuf:"bytes,9,opt,name=file_path_value,json=filePathValue,proto3,oneof"`
}

type Value_DirPathValue struct {
	DirPathValue *DirPath `protobuf:"bytes,10,opt,name=dir_path_value,json=dirPathValue,proto3,oneof"`
}

type Value_HostPathValue struct {
	HostPathValue *HostPath `protobuf:"bytes,11,opt,name=host_path_value,json=hostPathValue,proto3,oneof"`
}

type Value_FsPathValue struct {
	FsPathValue *FSPath `protobuf:"bytes,12,opt,name=fs_path_value,json=fsPathValue,proto3,oneof"`
}

type Value_ThunkValue struct {
	ThunkValue *Thunk `protobuf:"bytes,13,opt,name=thunk_value,json=thunkValue,proto3,oneof"`
}

type Value_ThunkPathValue struct {
	ThunkPathValue *ThunkPath `protobuf:"bytes,14,opt,name=thunk_path_value,json=thunkPathValue,proto3,oneof"`
}

type Value_CommandPathValue struct {
	CommandPathValue *CommandPath `protobuf:"bytes,15,opt,name=command_path_value,json=commandPathValue,proto3,oneof"`
}

func (*Value_NullValue) isValue_Value() {}

func (*Value_BoolValue) isValue_Value() {}

func (*Value_IntValue) isValue_Value() {}

func (*Value_StringValue) isValue_Value() {}

func (*Value_SecretValue) isValue_Value() {}

func (*Value_EmptyValue) isValue_Value() {}

func (*Value_PairValue) isValue_Value() {}

func (*Value_ScopeValue) isValue_Value() {}

func (*Value_FilePathValue) isValue_Value() {}

func (*Value_DirPathValue) isValue_Value() {}

func (*Value_HostPathValue) isValue_Value() {}

func (*Value_FsPathValue) isValue_Value() {}

func (*Value_ThunkValue) isValue_Value() {}

func (*Value_ThunkPathValue) isValue_Value() {}

func (*Value_CommandPathValue) isValue_Value() {}

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{1}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{2}
}

type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner bool `protobuf:"varint,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{3}
}

func (x *Bool) GetInner() bool {
	if x != nil {
		return x.Inner
	}
	return false
}

type Int struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner int64 `protobuf:"varint,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Int) Reset() {
	*x = Int{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int) ProtoMessage() {}

func (x *Int) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int.ProtoReflect.Descriptor instead.
func (*Int) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{4}
}

func (x *Int) GetInner() int64 {
	if x != nil {
		return x.Inner
	}
	return 0
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner string `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{5}
}

func (x *String) GetInner() string {
	if x != nil {
		return x.Inner
	}
	return ""
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *Value `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	D *Value `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{6}
}

func (x *Pair) GetA() *Value {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *Pair) GetD() *Value {
	if x != nil {
		return x.D
	}
	return nil
}

type Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Binding) Reset() {
	*x = Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{7}
}

func (x *Binding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Binding) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os   string `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Arch string `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{8}
}

func (x *Platform) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Platform) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

type ThunkImageRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform *Platform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Types that are assignable to Source:
	//	*ThunkImageRef_Repository
	//	*ThunkImageRef_File
	Source isThunkImageRef_Source `protobuf_oneof:"source"`
	Tag    *string                `protobuf:"bytes,4,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	Digest *string                `protobuf:"bytes,5,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
}

func (x *ThunkImageRef) Reset() {
	*x = ThunkImageRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkImageRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkImageRef) ProtoMessage() {}

func (x *ThunkImageRef) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkImageRef.ProtoReflect.Descriptor instead.
func (*ThunkImageRef) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{9}
}

func (x *ThunkImageRef) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (m *ThunkImageRef) GetSource() isThunkImageRef_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ThunkImageRef) GetRepository() string {
	if x, ok := x.GetSource().(*ThunkImageRef_Repository); ok {
		return x.Repository
	}
	return ""
}

func (x *ThunkImageRef) GetFile() *ThunkPath {
	if x, ok := x.GetSource().(*ThunkImageRef_File); ok {
		return x.File
	}
	return nil
}

func (x *ThunkImageRef) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *ThunkImageRef) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

type isThunkImageRef_Source interface {
	isThunkImageRef_Source()
}

type ThunkImageRef_Repository struct {
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3,oneof"`
}

type ThunkImageRef_File struct {
	File *ThunkPath `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

func (*ThunkImageRef_Repository) isThunkImageRef_Source() {}

func (*ThunkImageRef_File) isThunkImageRef_Source() {}

type ThunkImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Image:
	//	*ThunkImage_RefImage
	//	*ThunkImage_ThunkImage
	Image isThunkImage_Image `protobuf_oneof:"image"`
}

func (x *ThunkImage) Reset() {
	*x = ThunkImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkImage) ProtoMessage() {}

func (x *ThunkImage) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkImage.ProtoReflect.Descriptor instead.
func (*ThunkImage) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{10}
}

func (m *ThunkImage) GetImage() isThunkImage_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (x *ThunkImage) GetRefImage() *ThunkImageRef {
	if x, ok := x.GetImage().(*ThunkImage_RefImage); ok {
		return x.RefImage
	}
	return nil
}

func (x *ThunkImage) GetThunkImage() *Thunk {
	if x, ok := x.GetImage().(*ThunkImage_ThunkImage); ok {
		return x.ThunkImage
	}
	return nil
}

type isThunkImage_Image interface {
	isThunkImage_Image()
}

type ThunkImage_RefImage struct {
	RefImage *ThunkImageRef `protobuf:"bytes,1,opt,name=ref_image,json=refImage,proto3,oneof"`
}

type ThunkImage_ThunkImage struct {
	ThunkImage *Thunk `protobuf:"bytes,2,opt,name=thunk_image,json=thunkImage,proto3,oneof"`
}

func (*ThunkImage_RefImage) isThunkImage_Image() {}

func (*ThunkImage_ThunkImage) isThunkImage_Image() {}

type ThunkCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*ThunkCmd_CommandCmd
	//	*ThunkCmd_FileCmd
	//	*ThunkCmd_ThunkCmd
	//	*ThunkCmd_HostCmd
	//	*ThunkCmd_FsCmd
	Cmd isThunkCmd_Cmd `protobuf_oneof:"cmd"`
}

func (x *ThunkCmd) Reset() {
	*x = ThunkCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkCmd) ProtoMessage() {}

func (x *ThunkCmd) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkCmd.ProtoReflect.Descriptor instead.
func (*ThunkCmd) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{11}
}

func (m *ThunkCmd) GetCmd() isThunkCmd_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *ThunkCmd) GetCommandCmd() *CommandPath {
	if x, ok := x.GetCmd().(*ThunkCmd_CommandCmd); ok {
		return x.CommandCmd
	}
	return nil
}

func (x *ThunkCmd) GetFileCmd() *FilePath {
	if x, ok := x.GetCmd().(*ThunkCmd_FileCmd); ok {
		return x.FileCmd
	}
	return nil
}

func (x *ThunkCmd) GetThunkCmd() *ThunkPath {
	if x, ok := x.GetCmd().(*ThunkCmd_ThunkCmd); ok {
		return x.ThunkCmd
	}
	return nil
}

func (x *ThunkCmd) GetHostCmd() *HostPath {
	if x, ok := x.GetCmd().(*ThunkCmd_HostCmd); ok {
		return x.HostCmd
	}
	return nil
}

func (x *ThunkCmd) GetFsCmd() *FSPath {
	if x, ok := x.GetCmd().(*ThunkCmd_FsCmd); ok {
		return x.FsCmd
	}
	return nil
}

type isThunkCmd_Cmd interface {
	isThunkCmd_Cmd()
}

type ThunkCmd_CommandCmd struct {
	CommandCmd *CommandPath `protobuf:"bytes,1,opt,name=command_cmd,json=commandCmd,proto3,oneof"`
}

type ThunkCmd_FileCmd struct {
	FileCmd *FilePath `protobuf:"bytes,2,opt,name=file_cmd,json=fileCmd,proto3,oneof"`
}

type ThunkCmd_ThunkCmd struct {
	ThunkCmd *ThunkPath `protobuf:"bytes,3,opt,name=thunk_cmd,json=thunkCmd,proto3,oneof"`
}

type ThunkCmd_HostCmd struct {
	HostCmd *HostPath `protobuf:"bytes,4,opt,name=host_cmd,json=hostCmd,proto3,oneof"`
}

type ThunkCmd_FsCmd struct {
	FsCmd *FSPath `protobuf:"bytes,5,opt,name=fs_cmd,json=fsCmd,proto3,oneof"`
}

func (*ThunkCmd_CommandCmd) isThunkCmd_Cmd() {}

func (*ThunkCmd_FileCmd) isThunkCmd_Cmd() {}

func (*ThunkCmd_ThunkCmd) isThunkCmd_Cmd() {}

func (*ThunkCmd_HostCmd) isThunkCmd_Cmd() {}

func (*ThunkCmd_FsCmd) isThunkCmd_Cmd() {}

type ThunkDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Dir:
	//	*ThunkDir_LocalDir
	//	*ThunkDir_ThunkDir
	//	*ThunkDir_HostDir
	Dir isThunkDir_Dir `protobuf_oneof:"dir"`
}

func (x *ThunkDir) Reset() {
	*x = ThunkDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkDir) ProtoMessage() {}

func (x *ThunkDir) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkDir.ProtoReflect.Descriptor instead.
func (*ThunkDir) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{12}
}

func (m *ThunkDir) GetDir() isThunkDir_Dir {
	if m != nil {
		return m.Dir
	}
	return nil
}

func (x *ThunkDir) GetLocalDir() *DirPath {
	if x, ok := x.GetDir().(*ThunkDir_LocalDir); ok {
		return x.LocalDir
	}
	return nil
}

func (x *ThunkDir) GetThunkDir() *ThunkPath {
	if x, ok := x.GetDir().(*ThunkDir_ThunkDir); ok {
		return x.ThunkDir
	}
	return nil
}

func (x *ThunkDir) GetHostDir() *HostPath {
	if x, ok := x.GetDir().(*ThunkDir_HostDir); ok {
		return x.HostDir
	}
	return nil
}

type isThunkDir_Dir interface {
	isThunkDir_Dir()
}

type ThunkDir_LocalDir struct {
	LocalDir *DirPath `protobuf:"bytes,12,opt,name=local_dir,json=localDir,proto3,oneof"`
}

type ThunkDir_ThunkDir struct {
	ThunkDir *ThunkPath `protobuf:"bytes,13,opt,name=thunk_dir,json=thunkDir,proto3,oneof"`
}

type ThunkDir_HostDir struct {
	HostDir *HostPath `protobuf:"bytes,14,opt,name=host_dir,json=hostDir,proto3,oneof"`
}

func (*ThunkDir_LocalDir) isThunkDir_Dir() {}

func (*ThunkDir_ThunkDir) isThunkDir_Dir() {}

func (*ThunkDir_HostDir) isThunkDir_Dir() {}

type ThunkMountSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ThunkMountSource_ThunkSource
	//	*ThunkMountSource_HostSource
	//	*ThunkMountSource_FsSource
	//	*ThunkMountSource_CacheSource
	//	*ThunkMountSource_SecretSource
	Source isThunkMountSource_Source `protobuf_oneof:"source"`
}

func (x *ThunkMountSource) Reset() {
	*x = ThunkMountSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkMountSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkMountSource) ProtoMessage() {}

func (x *ThunkMountSource) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkMountSource.ProtoReflect.Descriptor instead.
func (*ThunkMountSource) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{13}
}

func (m *ThunkMountSource) GetSource() isThunkMountSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ThunkMountSource) GetThunkSource() *ThunkPath {
	if x, ok := x.GetSource().(*ThunkMountSource_ThunkSource); ok {
		return x.ThunkSource
	}
	return nil
}

func (x *ThunkMountSource) GetHostSource() *HostPath {
	if x, ok := x.GetSource().(*ThunkMountSource_HostSource); ok {
		return x.HostSource
	}
	return nil
}

func (x *ThunkMountSource) GetFsSource() *FSPath {
	if x, ok := x.GetSource().(*ThunkMountSource_FsSource); ok {
		return x.FsSource
	}
	return nil
}

func (x *ThunkMountSource) GetCacheSource() *CachePath {
	if x, ok := x.GetSource().(*ThunkMountSource_CacheSource); ok {
		return x.CacheSource
	}
	return nil
}

func (x *ThunkMountSource) GetSecretSource() *Secret {
	if x, ok := x.GetSource().(*ThunkMountSource_SecretSource); ok {
		return x.SecretSource
	}
	return nil
}

type isThunkMountSource_Source interface {
	isThunkMountSource_Source()
}

type ThunkMountSource_ThunkSource struct {
	ThunkSource *ThunkPath `protobuf:"bytes,1,opt,name=thunk_source,json=thunkSource,proto3,oneof"`
}

type ThunkMountSource_HostSource struct {
	HostSource *HostPath `protobuf:"bytes,2,opt,name=host_source,json=hostSource,proto3,oneof"`
}

type ThunkMountSource_FsSource struct {
	FsSource *FSPath `protobuf:"bytes,3,opt,name=fs_source,json=fsSource,proto3,oneof"`
}

type ThunkMountSource_CacheSource struct {
	CacheSource *CachePath `protobuf:"bytes,4,opt,name=cache_source,json=cacheSource,proto3,oneof"`
}

type ThunkMountSource_SecretSource struct {
	SecretSource *Secret `protobuf:"bytes,5,opt,name=secret_source,json=secretSource,proto3,oneof"`
}

func (*ThunkMountSource_ThunkSource) isThunkMountSource_Source() {}

func (*ThunkMountSource_HostSource) isThunkMountSource_Source() {}

func (*ThunkMountSource_FsSource) isThunkMountSource_Source() {}

func (*ThunkMountSource_CacheSource) isThunkMountSource_Source() {}

func (*ThunkMountSource_SecretSource) isThunkMountSource_Source() {}

type CachePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Path:
	//	*CachePath_File
	//	*CachePath_Dir
	Path isCachePath_Path `protobuf_oneof:"path"`
}

func (x *CachePath) Reset() {
	*x = CachePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachePath) ProtoMessage() {}

func (x *CachePath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachePath.ProtoReflect.Descriptor instead.
func (*CachePath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{14}
}

func (m *CachePath) GetPath() isCachePath_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *CachePath) GetFile() *FilePath {
	if x, ok := x.GetPath().(*CachePath_File); ok {
		return x.File
	}
	return nil
}

func (x *CachePath) GetDir() *DirPath {
	if x, ok := x.GetPath().(*CachePath_Dir); ok {
		return x.Dir
	}
	return nil
}

type isCachePath_Path interface {
	isCachePath_Path()
}

type CachePath_File struct {
	File *FilePath `protobuf:"bytes,1,opt,name=file,proto3,oneof"`
}

type CachePath_Dir struct {
	Dir *DirPath `protobuf:"bytes,2,opt,name=dir,proto3,oneof"`
}

func (*CachePath_File) isCachePath_Path() {}

func (*CachePath_Dir) isCachePath_Path() {}

type ThunkMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *ThunkMountSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Types that are assignable to Target:
	//	*ThunkMount_FileTarget
	//	*ThunkMount_DirTarget
	Target isThunkMount_Target `protobuf_oneof:"target"`
}

func (x *ThunkMount) Reset() {
	*x = ThunkMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkMount) ProtoMessage() {}

func (x *ThunkMount) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkMount.ProtoReflect.Descriptor instead.
func (*ThunkMount) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{15}
}

func (x *ThunkMount) GetSource() *ThunkMountSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (m *ThunkMount) GetTarget() isThunkMount_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ThunkMount) GetFileTarget() *FilePath {
	if x, ok := x.GetTarget().(*ThunkMount_FileTarget); ok {
		return x.FileTarget
	}
	return nil
}

func (x *ThunkMount) GetDirTarget() *DirPath {
	if x, ok := x.GetTarget().(*ThunkMount_DirTarget); ok {
		return x.DirTarget
	}
	return nil
}

type isThunkMount_Target interface {
	isThunkMount_Target()
}

type ThunkMount_FileTarget struct {
	FileTarget *FilePath `protobuf:"bytes,6,opt,name=file_target,json=fileTarget,proto3,oneof"`
}

type ThunkMount_DirTarget struct {
	DirTarget *DirPath `protobuf:"bytes,7,opt,name=dir_target,json=dirTarget,proto3,oneof"`
}

func (*ThunkMount_FileTarget) isThunkMount_Target() {}

func (*ThunkMount_DirTarget) isThunkMount_Target() {}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*Binding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{16}
}

func (x *Scope) GetBindings() []*Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

type Thunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    *ThunkImage   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Insecure bool          `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	Cmd      *ThunkCmd     `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Args     []*Value      `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Stdin    []*Value      `protobuf:"bytes,5,rep,name=stdin,proto3" json:"stdin,omitempty"`
	Env      []*Binding    `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty"`
	Dir      *ThunkDir     `protobuf:"bytes,7,opt,name=dir,proto3" json:"dir,omitempty"`
	Mounts   []*ThunkMount `protobuf:"bytes,8,rep,name=mounts,proto3" json:"mounts,omitempty"`
	Labels   []*Binding    `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *Thunk) Reset() {
	*x = Thunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thunk) ProtoMessage() {}

func (x *Thunk) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thunk.ProtoReflect.Descriptor instead.
func (*Thunk) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{17}
}

func (x *Thunk) GetImage() *ThunkImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Thunk) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *Thunk) GetCmd() *ThunkCmd {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Thunk) GetArgs() []*Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Thunk) GetStdin() []*Value {
	if x != nil {
		return x.Stdin
	}
	return nil
}

func (x *Thunk) GetEnv() []*Binding {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Thunk) GetDir() *ThunkDir {
	if x != nil {
		return x.Dir
	}
	return nil
}

func (x *Thunk) GetMounts() []*ThunkMount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *Thunk) GetLabels() []*Binding {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{18}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type CommandPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *CommandPath) Reset() {
	*x = CommandPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPath) ProtoMessage() {}

func (x *CommandPath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPath.ProtoReflect.Descriptor instead.
func (*CommandPath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{19}
}

func (x *CommandPath) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type FilePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FilePath) Reset() {
	*x = FilePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePath) ProtoMessage() {}

func (x *FilePath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePath.ProtoReflect.Descriptor instead.
func (*FilePath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{20}
}

func (x *FilePath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DirPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DirPath) Reset() {
	*x = DirPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirPath) ProtoMessage() {}

func (x *DirPath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirPath.ProtoReflect.Descriptor instead.
func (*DirPath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{21}
}

func (x *DirPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ThunkPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thunk *Thunk `protobuf:"bytes,1,opt,name=thunk,proto3" json:"thunk,omitempty"`
	// Types that are assignable to Path:
	//	*ThunkPath_File
	//	*ThunkPath_Dir
	Path isThunkPath_Path `protobuf_oneof:"path"`
}

func (x *ThunkPath) Reset() {
	*x = ThunkPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThunkPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThunkPath) ProtoMessage() {}

func (x *ThunkPath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThunkPath.ProtoReflect.Descriptor instead.
func (*ThunkPath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{22}
}

func (x *ThunkPath) GetThunk() *Thunk {
	if x != nil {
		return x.Thunk
	}
	return nil
}

func (m *ThunkPath) GetPath() isThunkPath_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *ThunkPath) GetFile() *FilePath {
	if x, ok := x.GetPath().(*ThunkPath_File); ok {
		return x.File
	}
	return nil
}

func (x *ThunkPath) GetDir() *DirPath {
	if x, ok := x.GetPath().(*ThunkPath_Dir); ok {
		return x.Dir
	}
	return nil
}

type isThunkPath_Path interface {
	isThunkPath_Path()
}

type ThunkPath_File struct {
	File *FilePath `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type ThunkPath_Dir struct {
	Dir *DirPath `protobuf:"bytes,3,opt,name=dir,proto3,oneof"`
}

func (*ThunkPath_File) isThunkPath_Path() {}

func (*ThunkPath_Dir) isThunkPath_Path() {}

type FSPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Path:
	//	*FSPath_File
	//	*FSPath_Dir
	Path isFSPath_Path `protobuf_oneof:"path"`
}

func (x *FSPath) Reset() {
	*x = FSPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FSPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSPath) ProtoMessage() {}

func (x *FSPath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSPath.ProtoReflect.Descriptor instead.
func (*FSPath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{23}
}

func (x *FSPath) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *FSPath) GetPath() isFSPath_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *FSPath) GetFile() *FilePath {
	if x, ok := x.GetPath().(*FSPath_File); ok {
		return x.File
	}
	return nil
}

func (x *FSPath) GetDir() *DirPath {
	if x, ok := x.GetPath().(*FSPath_Dir); ok {
		return x.Dir
	}
	return nil
}

type isFSPath_Path interface {
	isFSPath_Path()
}

type FSPath_File struct {
	File *FilePath `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type FSPath_Dir struct {
	Dir *DirPath `protobuf:"bytes,3,opt,name=dir,proto3,oneof"`
}

func (*FSPath_File) isFSPath_Path() {}

func (*FSPath_Dir) isFSPath_Path() {}

type HostPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Types that are assignable to Path:
	//	*HostPath_File
	//	*HostPath_Dir
	Path isHostPath_Path `protobuf_oneof:"path"`
}

func (x *HostPath) Reset() {
	*x = HostPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bass_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPath) ProtoMessage() {}

func (x *HostPath) ProtoReflect() protoreflect.Message {
	mi := &file_bass_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPath.ProtoReflect.Descriptor instead.
func (*HostPath) Descriptor() ([]byte, []int) {
	return file_bass_proto_rawDescGZIP(), []int{24}
}

func (x *HostPath) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (m *HostPath) GetPath() isHostPath_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *HostPath) GetFile() *FilePath {
	if x, ok := x.GetPath().(*HostPath_File); ok {
		return x.File
	}
	return nil
}

func (x *HostPath) GetDir() *DirPath {
	if x, ok := x.GetPath().(*HostPath_Dir); ok {
		return x.Dir
	}
	return nil
}

type isHostPath_Path interface {
	isHostPath_Path()
}

type HostPath_File struct {
	File *FilePath `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type HostPath_Dir struct {
	Dir *DirPath `protobuf:"bytes,3,opt,name=dir,proto3,oneof"`
}

func (*HostPath_File) isHostPath_Path() {}

func (*HostPath_Dir) isHostPath_Path() {}

var File_bass_proto protoreflect.FileDescriptor

var file_bass_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x61,
	0x73, 0x73, 0x22, 0x96, 0x06, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0a,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09,
	0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x62, 0x61, 0x73, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x69, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a,
	0x0e, 0x64, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x61, 0x73, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x0d, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x53, 0x50,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62,
	0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x41, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x0a, 0x04,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x1b, 0x0a, 0x03, 0x49, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x19, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x61, 0x12, 0x19, 0x0a, 0x01, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x01, 0x64, 0x22, 0x40, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x54, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75,
	0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x74, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22,
	0x79, 0x0a, 0x0a, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x54,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x61, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2b, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x61, 0x73, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x73, 0x5f, 0x63, 0x6d,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46,
	0x53, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x05, 0x66, 0x73, 0x43, 0x6d, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x44,
	0x69, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x72,
	0x12, 0x2e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x69, 0x72,
	0x12, 0x2b, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x48, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x72, 0x42, 0x05, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x53, 0x50,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x66, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62,
	0x61, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e,
	0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x32,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x05, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6d, 0x64, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e,
	0x6b, 0x44, 0x69, 0x72, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x1d, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x7f, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x05, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x69, 0x0a, 0x06, 0x46, 0x53, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x75, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x2a, 0x44, 0x0a, 0x07, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x46, 0x53, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4c, 0x49, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x4b, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x53, 0x54, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4d, 0x4f, 0x53, 0x10, 0x04, 0x42,
	0x0b, 0x5a, 0x09, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bass_proto_rawDescOnce sync.Once
	file_bass_proto_rawDescData = file_bass_proto_rawDesc
)

func file_bass_proto_rawDescGZIP() []byte {
	file_bass_proto_rawDescOnce.Do(func() {
		file_bass_proto_rawDescData = protoimpl.X.CompressGZIP(file_bass_proto_rawDescData)
	})
	return file_bass_proto_rawDescData
}

var file_bass_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bass_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_bass_proto_goTypes = []interface{}{
	(EmbedFS)(0),             // 0: bass.EmbedFS
	(*Value)(nil),            // 1: bass.Value
	(*Null)(nil),             // 2: bass.Null
	(*Empty)(nil),            // 3: bass.Empty
	(*Bool)(nil),             // 4: bass.Bool
	(*Int)(nil),              // 5: bass.Int
	(*String)(nil),           // 6: bass.String
	(*Pair)(nil),             // 7: bass.Pair
	(*Binding)(nil),          // 8: bass.Binding
	(*Platform)(nil),         // 9: bass.Platform
	(*ThunkImageRef)(nil),    // 10: bass.ThunkImageRef
	(*ThunkImage)(nil),       // 11: bass.ThunkImage
	(*ThunkCmd)(nil),         // 12: bass.ThunkCmd
	(*ThunkDir)(nil),         // 13: bass.ThunkDir
	(*ThunkMountSource)(nil), // 14: bass.ThunkMountSource
	(*CachePath)(nil),        // 15: bass.CachePath
	(*ThunkMount)(nil),       // 16: bass.ThunkMount
	(*Scope)(nil),            // 17: bass.Scope
	(*Thunk)(nil),            // 18: bass.Thunk
	(*Secret)(nil),           // 19: bass.Secret
	(*CommandPath)(nil),      // 20: bass.CommandPath
	(*FilePath)(nil),         // 21: bass.FilePath
	(*DirPath)(nil),          // 22: bass.DirPath
	(*ThunkPath)(nil),        // 23: bass.ThunkPath
	(*FSPath)(nil),           // 24: bass.FSPath
	(*HostPath)(nil),         // 25: bass.HostPath
}
var file_bass_proto_depIdxs = []int32{
	2,  // 0: bass.Value.null_value:type_name -> bass.Null
	4,  // 1: bass.Value.bool_value:type_name -> bass.Bool
	5,  // 2: bass.Value.int_value:type_name -> bass.Int
	6,  // 3: bass.Value.string_value:type_name -> bass.String
	19, // 4: bass.Value.secret_value:type_name -> bass.Secret
	3,  // 5: bass.Value.empty_value:type_name -> bass.Empty
	7,  // 6: bass.Value.pair_value:type_name -> bass.Pair
	17, // 7: bass.Value.scope_value:type_name -> bass.Scope
	21, // 8: bass.Value.file_path_value:type_name -> bass.FilePath
	22, // 9: bass.Value.dir_path_value:type_name -> bass.DirPath
	25, // 10: bass.Value.host_path_value:type_name -> bass.HostPath
	24, // 11: bass.Value.fs_path_value:type_name -> bass.FSPath
	18, // 12: bass.Value.thunk_value:type_name -> bass.Thunk
	23, // 13: bass.Value.thunk_path_value:type_name -> bass.ThunkPath
	20, // 14: bass.Value.command_path_value:type_name -> bass.CommandPath
	1,  // 15: bass.Pair.a:type_name -> bass.Value
	1,  // 16: bass.Pair.d:type_name -> bass.Value
	1,  // 17: bass.Binding.value:type_name -> bass.Value
	9,  // 18: bass.ThunkImageRef.platform:type_name -> bass.Platform
	23, // 19: bass.ThunkImageRef.file:type_name -> bass.ThunkPath
	10, // 20: bass.ThunkImage.ref_image:type_name -> bass.ThunkImageRef
	18, // 21: bass.ThunkImage.thunk_image:type_name -> bass.Thunk
	20, // 22: bass.ThunkCmd.command_cmd:type_name -> bass.CommandPath
	21, // 23: bass.ThunkCmd.file_cmd:type_name -> bass.FilePath
	23, // 24: bass.ThunkCmd.thunk_cmd:type_name -> bass.ThunkPath
	25, // 25: bass.ThunkCmd.host_cmd:type_name -> bass.HostPath
	24, // 26: bass.ThunkCmd.fs_cmd:type_name -> bass.FSPath
	22, // 27: bass.ThunkDir.local_dir:type_name -> bass.DirPath
	23, // 28: bass.ThunkDir.thunk_dir:type_name -> bass.ThunkPath
	25, // 29: bass.ThunkDir.host_dir:type_name -> bass.HostPath
	23, // 30: bass.ThunkMountSource.thunk_source:type_name -> bass.ThunkPath
	25, // 31: bass.ThunkMountSource.host_source:type_name -> bass.HostPath
	24, // 32: bass.ThunkMountSource.fs_source:type_name -> bass.FSPath
	15, // 33: bass.ThunkMountSource.cache_source:type_name -> bass.CachePath
	19, // 34: bass.ThunkMountSource.secret_source:type_name -> bass.Secret
	21, // 35: bass.CachePath.file:type_name -> bass.FilePath
	22, // 36: bass.CachePath.dir:type_name -> bass.DirPath
	14, // 37: bass.ThunkMount.source:type_name -> bass.ThunkMountSource
	21, // 38: bass.ThunkMount.file_target:type_name -> bass.FilePath
	22, // 39: bass.ThunkMount.dir_target:type_name -> bass.DirPath
	8,  // 40: bass.Scope.bindings:type_name -> bass.Binding
	11, // 41: bass.Thunk.image:type_name -> bass.ThunkImage
	12, // 42: bass.Thunk.cmd:type_name -> bass.ThunkCmd
	1,  // 43: bass.Thunk.args:type_name -> bass.Value
	1,  // 44: bass.Thunk.stdin:type_name -> bass.Value
	8,  // 45: bass.Thunk.env:type_name -> bass.Binding
	13, // 46: bass.Thunk.dir:type_name -> bass.ThunkDir
	16, // 47: bass.Thunk.mounts:type_name -> bass.ThunkMount
	8,  // 48: bass.Thunk.labels:type_name -> bass.Binding
	18, // 49: bass.ThunkPath.thunk:type_name -> bass.Thunk
	21, // 50: bass.ThunkPath.file:type_name -> bass.FilePath
	22, // 51: bass.ThunkPath.dir:type_name -> bass.DirPath
	21, // 52: bass.FSPath.file:type_name -> bass.FilePath
	22, // 53: bass.FSPath.dir:type_name -> bass.DirPath
	21, // 54: bass.HostPath.file:type_name -> bass.FilePath
	22, // 55: bass.HostPath.dir:type_name -> bass.DirPath
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_bass_proto_init() }
func file_bass_proto_init() {
	if File_bass_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkImageRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkMountSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThunkPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FSPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bass_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bass_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Value_NullValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_IntValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_SecretValue)(nil),
		(*Value_EmptyValue)(nil),
		(*Value_PairValue)(nil),
		(*Value_ScopeValue)(nil),
		(*Value_FilePathValue)(nil),
		(*Value_DirPathValue)(nil),
		(*Value_HostPathValue)(nil),
		(*Value_FsPathValue)(nil),
		(*Value_ThunkValue)(nil),
		(*Value_ThunkPathValue)(nil),
		(*Value_CommandPathValue)(nil),
	}
	file_bass_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ThunkImageRef_Repository)(nil),
		(*ThunkImageRef_File)(nil),
	}
	file_bass_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ThunkImage_RefImage)(nil),
		(*ThunkImage_ThunkImage)(nil),
	}
	file_bass_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ThunkCmd_CommandCmd)(nil),
		(*ThunkCmd_FileCmd)(nil),
		(*ThunkCmd_ThunkCmd)(nil),
		(*ThunkCmd_HostCmd)(nil),
		(*ThunkCmd_FsCmd)(nil),
	}
	file_bass_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ThunkDir_LocalDir)(nil),
		(*ThunkDir_ThunkDir)(nil),
		(*ThunkDir_HostDir)(nil),
	}
	file_bass_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ThunkMountSource_ThunkSource)(nil),
		(*ThunkMountSource_HostSource)(nil),
		(*ThunkMountSource_FsSource)(nil),
		(*ThunkMountSource_CacheSource)(nil),
		(*ThunkMountSource_SecretSource)(nil),
	}
	file_bass_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*CachePath_File)(nil),
		(*CachePath_Dir)(nil),
	}
	file_bass_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ThunkMount_FileTarget)(nil),
		(*ThunkMount_DirTarget)(nil),
	}
	file_bass_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ThunkPath_File)(nil),
		(*ThunkPath_Dir)(nil),
	}
	file_bass_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*FSPath_File)(nil),
		(*FSPath_Dir)(nil),
	}
	file_bass_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*HostPath_File)(nil),
		(*HostPath_Dir)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bass_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bass_proto_goTypes,
		DependencyIndexes: file_bass_proto_depIdxs,
		EnumInfos:         file_bass_proto_enumTypes,
		MessageInfos:      file_bass_proto_msgTypes,
	}.Build()
	File_bass_proto = out.File
	file_bass_proto_rawDesc = nil
	file_bass_proto_goTypes = nil
	file_bass_proto_depIdxs = nil
}
