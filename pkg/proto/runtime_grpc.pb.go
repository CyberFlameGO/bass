// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: runtime.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeClient interface {
	Resolve(ctx context.Context, in *ThunkImageRef, opts ...grpc.CallOption) (*ThunkImageRef, error)
	Run(ctx context.Context, in *Thunk, opts ...grpc.CallOption) (Runtime_RunClient, error)
}

type runtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeClient(cc grpc.ClientConnInterface) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) Resolve(ctx context.Context, in *ThunkImageRef, opts ...grpc.CallOption) (*ThunkImageRef, error) {
	out := new(ThunkImageRef)
	err := c.cc.Invoke(ctx, "/bass.Runtime/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) Run(ctx context.Context, in *Thunk, opts ...grpc.CallOption) (Runtime_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runtime_ServiceDesc.Streams[0], "/bass.Runtime/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_RunClient interface {
	Recv() (*ProgressOrOutput, error)
	grpc.ClientStream
}

type runtimeRunClient struct {
	grpc.ClientStream
}

func (x *runtimeRunClient) Recv() (*ProgressOrOutput, error) {
	m := new(ProgressOrOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuntimeServer is the server API for Runtime service.
// All implementations must embed UnimplementedRuntimeServer
// for forward compatibility
type RuntimeServer interface {
	Resolve(context.Context, *ThunkImageRef) (*ThunkImageRef, error)
	Run(*Thunk, Runtime_RunServer) error
	mustEmbedUnimplementedRuntimeServer()
}

// UnimplementedRuntimeServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServer struct {
}

func (UnimplementedRuntimeServer) Resolve(context.Context, *ThunkImageRef) (*ThunkImageRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedRuntimeServer) Run(*Thunk, Runtime_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRuntimeServer) mustEmbedUnimplementedRuntimeServer() {}

// UnsafeRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServer will
// result in compilation errors.
type UnsafeRuntimeServer interface {
	mustEmbedUnimplementedRuntimeServer()
}

func RegisterRuntimeServer(s grpc.ServiceRegistrar, srv RuntimeServer) {
	s.RegisterService(&Runtime_ServiceDesc, srv)
}

func _Runtime_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThunkImageRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bass.Runtime/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Resolve(ctx, req.(*ThunkImageRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Thunk)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).Run(m, &runtimeRunServer{stream})
}

type Runtime_RunServer interface {
	Send(*ProgressOrOutput) error
	grpc.ServerStream
}

type runtimeRunServer struct {
	grpc.ServerStream
}

func (x *runtimeRunServer) Send(m *ProgressOrOutput) error {
	return x.ServerStream.SendMsg(m)
}

// Runtime_ServiceDesc is the grpc.ServiceDesc for Runtime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runtime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bass.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _Runtime_Resolve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Runtime_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runtime.proto",
}
