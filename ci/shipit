#!/usr/bin/env bass

; load libraries
(use (*dir*/../project)
     (.strings))

; all supported os and architectures supported by bass
;
; Must be valid values to pass to GOOS / GOARCH.
(def supported-os-arches
  [["linux" "amd64"]
   ["darwin" "amd64"]
   ["darwin" "arm64"]])

; returns the bass binary archives for each supported os + arch
(defn all-bins [src tag]
  (foldl
    (fn [acc [os arch]]
      (assoc acc
             (string->symbol (str os "-" arch))
             (project:build src tag os arch)))
    {}
    supported-os-arches))

; returns a .json file representation of a built archive
(defn archive-repro [os-arch archive]
  (mkfile (string->fs-path (str "bass." os-arch ".json"))
          (json archive)))

; returns the sha256sum output of each file
;
; Makes sure to to mount each file in to the working directory so that the
; output can be passed to sha256sum --check --ignore-missing.
(defn sha256sums [files]
  (-> (from project:images:deps
        (foldl
          (fn [t f] (with-mount t f (path-base f)))
          (with-args (.sha256sum) (map path-base files))
          files))
      (read :raw)
      next))

; returns all the assets that will be uploaded to the release
(defn build-assets [src tag]
  (let [bins (all-bins src tag)
        archives (vals bins)
        repros (reduce-kv (fn [acc k v] (cons (archive-repro k v) acc)) [] bins)
        files (append archives repros)
        sums (mkfile ./sha256sums.txt (sha256sums files))]
    (conj files sums)))

; returns true if the tag looks like a prerelease version
(defn prerelease? [tag]
  (or ; "v1.2.3-rc.1"
      (strings:includes? tag "-")
      ; "v0.2.0+dev"
      (strings:includes? tag "+")
      ; "nightly"
      (not (strings:includes? tag "."))))

; undoes line wrapping in a given file
;
; GitHub releases, for whatever reason, respect word wrapping in the release
; body which makes it look pretty hideous on the desktop.
;
; Returns a memory-backed file, so this can be shimmed in-place.
(defn undo-wordwrap [file]
  (mkfile ./wide.txt
    (-> ($ fmt -w999 $file)
        (with-image project:images:deps)
        (read :raw)
        next)))

; creates a release with the given assets
(defn create-release [sha title tag notes assets]
  (let [release (project:auth-release (mask *env*:GITHUB_TOKEN :github-token))]
    (logf "running smoke tests")
    (project:smoke-test assets/bass.linux-amd64.tgz)

    (logf "shipping bass @ %s with tag %s" sha)
    (release:create!
      tag sha assets
      {:title title
       :generate-notes true
       :notes-file (undo-wordwrap notes)
       :prerelease (prerelease? tag)
       :discussion-category (if pre? "" "General")})))

; builds and publishes a GitHub release
;
; Needs the tag to checkout, build, and publish along with a title for the
; release.
(defn main [sha tag title]
  (let [src (project:checkout sha)
        notes (project:release-notes src tag)
        assets (build-assets src tag)
        release-url (create-release sha title tag notes assets)]
    (logf "release published to %s" release-url)))
