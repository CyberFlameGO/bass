#!/usr/bin/env bass

(def *memos*
  *dir*/memos.json)

(use (.hmac)
     (.strings)
     (.git (linux/alpine/git))
     (git:github/vito/tabs/ref/main/gh)
     (*dir*/checks))

(defn main []
  (let [!hook-secret! (mask *env*:WEBHOOK_SECRET :hook-secret)
        !private-key! (mask *env*:APP_PRIVATE_KEY :app-private-key)
        github (github-client !private-key!)
        {:headers {:X-Github-Delivery delivery
                   :X-Github-Event event
                   :X-Hub-Signature-256 signature}
         :body body} (next *stdin*)]
    (verify! body signature !hook-secret!)
    (handle (decode-json body) delivery event github)
    (emit {:handled delivery} *stdout*)))

(defn github-client [!private-key!]
  (module [check]
    (defn check [thunk name payload]
      (let [{:repository {:full-name repo}
             :check-suite {:head-sha sha
                           :app {:id app-id}}
             :installation {:id inst-id}} payload]
        (checks:start thunk name sha repo
                      inst-id
                      app-id
                      !private-key!)))))

(defn verify! [body signature !hook-secret!]
  (let [[scheme claim] (strings:split signature "=")
        hmac-scheme (hmac:scheme scheme)]
    (if (hmac-scheme:verify !hook-secret! claim body)
      :ok
      (error "invalid signature"))))

(defn handle [payload delivery event github]
  (log "handling" :delivery delivery :event event)
  (let [{:repository repo} payload]
    (log "delivering" :delivery delivery :repo repo:full-name)
    (deliver repo payload event github)))

(defn deliver [repo payload event github]
  (let [{:clone-url url
         :default-branch branch
         :pushed-at pushed-at} repo
        ref (git:ls-remote url branch pushed-at)
        src (git:checkout url ref)
        project (load (src/project))]
    (project:github-event event payload github)))

(defn decode-json [payload]
  (next (read (mkfile ./json payload) :json)))
