#!/usr/bin/env bass

(provide [handle-event]
  (def *memos*
    *dir*/../memos.json)

  (use (.hmac)
       (.strings)
       (.git (linux/alpine/git))
       (git:github/vito/tabs/ref/main/gh)
       (*dir*/checks))

  (def *app-id*
    *env*:GITHUB_APP_ID)

  (defn handle-event [request respond]
    (let [!hook-secret! (mask *env*:GITHUB_WEBHOOK_SECRET :github-hook-secret)
          !app-private-key! (mask *env*:GITHUB_APP_PRIVATE_KEY :github-app-private-key)
          github (app-client !app-private-key!)
          {:headers {:X-Github-Delivery delivery
                     :X-Github-Event event
                     :X-Hub-Signature-256 signature}
           :body body} request]
      (verify! body signature !hook-secret!)

      (log "handling" :delivery delivery :event event)
      (respond {:handling delivery})
      (dispatch (decode-json body) delivery event github)))

  (defn app-client [!app-private-key!]
    (module [check]
      (defn check [thunk name sha payload]
        (let [{:repository {:full-name repo}
               :installation {:id inst-id}} payload]
          (checks:start thunk name sha repo inst-id
                        *app-id*
                        !app-private-key!)))))

  (defn verify! [body signature !hook-secret!]
    (let [[scheme claim] (strings:split signature "=")]
      (if (hmac:verify scheme !hook-secret! claim body)
        :ok
        (error "invalid signature"))))

  (defn dispatch [payload delivery event github]
    (let [{:repository
           {:full-name repo-name
            :clone-url url
            :default-branch branch
            :pushed-at pushed-at}} payload
          sha (git:ls-remote url branch pushed-at)
          src (git:checkout url sha)
          project (load (src/project))]
      (project:github-event event payload github)))

  (defn decode-json [payload]
    (next (read (mkfile ./json payload) :json))))
