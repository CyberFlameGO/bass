#!/usr/bin/env bass

(provide [event-handler]
  (def *memos* *dir*/../memos.json)

  (use (.hmac)
       (.strings)
       (.git (linux/alpine/git))
       (*dir*/checks))

  ; returns a module with a GitHub webhook event handler that dispatches events
  ; back to the repo that they came from
  ;
  ; Verifies webhook payloads with the provided webhook secret, returning an
  ; error if the signature doesn't match.
  ;
  ; Retrieves the repository from the event payload, clones it, loads
  ; project.bass from the root of the source tree, and calls (github-event)
  ; with the event type, event payload, and a module providing functions for
  ; interacting with GitHub (e.g. check creation).
  (defn event-handler [app-id !hook-secret! !private-key!]
    (module [handle]
      ; accepts webhook payloads and asynchronously dispatches events
      (defn handle [request respond]
        (let [{:headers {:X-Github-Delivery delivery
                         :X-Github-Event event
                         :X-Hub-Signature-256 signature}
               :body body} request]
          (verify! body signature)

          (log "handling" :delivery delivery :event event)
          (respond {:handling delivery})
          (dispatch (decode-json body) delivery event)))

      ; verifies the HMAC signature and errors if the signature is invalid
      (defn verify! [body signature]
        (let [[scheme claim] (strings:split signature "=")]
          (if (hmac:verify scheme !hook-secret! claim body)
            :ok
            (error "invalid signature"))))

      ; a module for interacting with GitHub on behalf of the app
      (def handler-client
        (module [check]
          (defn check [thunk name sha payload]
            (let [{:repository {:full-name repo}
                   :installation {:id inst-id}} payload]
              (checks:start thunk name sha repo
                            inst-id
                            app-id
                            !private-key!)))))

      ; forwards the event to the repository it came from
      ;
      ; Clones the repository at its default branch so that pull requests
      ; cannot just zero-out tests or introduce malicious Bass code.
      ;
      ; Loads project.bass from the root of the repository and calls
      ; (github-event) with the event type, event payload, and a module
      ; providing functions for interacting with GitHub (e.g. check creation).
      (defn dispatch [payload delivery event]
        (let [{:repository
               {:full-name repo-name
                :clone-url url
                :default-branch branch
                :pushed-at pushed-at}} payload
              sha (git:ls-remote url branch pushed-at)
              src (git:checkout url sha)
              project (load (src/project))]
          (project:github-event event payload handler-client)))))

  ; returns the first JSON object encoded in the payload
  (defn decode-json [payload]
    (next (read (mkfile ./json payload) :json))))
