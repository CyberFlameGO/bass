#!/usr/bin/env bass

(provide [start-status]
  (def *memos* *dir*/bass.lock)

  ; starts the thunk and reflects its status as a Commit Status
  (defn start-status [thunk name sha repo auth]
    (create-status sha repo auth {:context name
                                  :state "pending"})
    (start thunk
      (fn [ok?]
        (create-status
          sha repo auth
          {:context name
           :state (if ok? "success" "failure")})
        [name ok?])))

  ; build the gh-curl helper executable
  (def gh-curl
    (-> ($ go build -o ../gh-curl ./)
        (with-env {:CGO_ENABLED "0"})
        (with-mount *dir*/gh-curl/ ./src/)
        (with-dir ./src/)
        (with-image (linux/golang))
        (subpath ./gh-curl)))

  ; modifies a gh-curl call to pass the configured auth settings
  (defn with-gh-auth [thunk auth]
    (case auth
      {:app-id app-id
       :installation-id inst-id
       :private-key key}
      (-> thunk
          (with-args (conj (thunk-args thunk)
                           "--app-id" (str app-id)
                           "--app-private-key" "/app-key"
                           "--installation-id" (str inst-id)))
          (with-mount key /app-key))

      {:token token}
      (-> thunk
          (with-args (conj (thunk-args thunk)
                           "--token" "/token"))
          (with-mount token /token))))

  ; sends an API request to GitHub using the app's private key
  (defn gh-api [method path payload auth]
    (-> ($ $gh-curl -X $method $path)
        (with-gh-auth auth)
        (with-image (linux/alpine))
        (with-stdin [payload])
        (read :json)
        next))

  ; creates or updates a commit status
  (defn create-status [sha repo auth body]
    (log "creating commit status" :repo repo :sha sha :body body)
    (gh-api "POST" (str "repos/" repo "/statuses/" sha) body auth)))
