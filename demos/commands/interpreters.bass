; this is just a mockup. not sure if it will pan out.
;
; most of the code below is boilerplate that would be hidden away from the
; user, pulled in either as part of bass stdlib or as a module.

(defn concourse-check-request [args]
  (cond
    ((= 1 (length args))
     {:source (first args)})

    ((= 2 (length args))
     {:source (first args)
      :params (second args)})

    (true
      invalid-check-args))) ; TODO: fail

(defn concourse-get-request [args]
  (cond
    ((= 2 (length args))
     {:source (first args)
      :version (second args)})

    ((= 3 (length args))
     {:source (first args)
      :version (second args)
      :params (third args)})

    (true
      invalid-get-args))) ; TODO: fail

(defn concourse-put-request [args]
  (cond
    ((= 1 (length args))
     {:source (first args)})

    ((= 2 (length args))
     {:source (first args)
      :params (second args)})

    (true
      invalid-put-args))) ; TODO: fail

(defn concourse-resource-request [cmd args]
  (cond
    ((= cmd .check)
     {:command ["/opt/resource/check"]
      :stdin [(concourse-check-request args)]})

    ((= cmd .get)
     {:command ["/opt/resource/in" "."]
      :stdin [(concourse-get-request args)]})

    ((= cmd .put)
     {:command ["/opt/resource/out" "."]
      :stdin [(concourse-put-request args)]})))

(defn concourse-resource [platform workload-proto source]
  (fn [cmd . args]
    {:platform platform
     :request (concourse-resource-request cmd (cons source args))}))

;;;;;;;;;;;;;;;

(defn git [source]
  (concourse-resource
    {:os "linux"}
    {:image {:repository "concourse/git-resource"}}
    source))

(def bass
  (git {:uri "https://github.com/vito/bass"}))

(run (bass .check)
     (fn [versions]
       (run (bass .get (last versions))
            (fn [bits]
              (log (next bits))))))

; or...
(with [versions (bass .check)
       bits (bass .get (last versions))]
  (log (next bits)))
