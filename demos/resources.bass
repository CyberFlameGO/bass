#!/usr/bin/env bass

(defn resource [platform image source]
  (fn [cmd . args]
    (cond
      (and (= cmd .check) (empty? args))
      (let [workload (-> (/opt/resource/check {:source source})
                         (on-platform platform)
                         (in-image image))]
          (apply stream (next (run workload))))

      (and (= cmd .check) (= 1 (length args)))
        (let [workload (-> (/opt/resource/check
                             {:source source
                              :version (first args)})
                           (on-platform platform)
                           (in-image image))]
          (apply stream (next (run workload))))

      (and (= cmd .get) (= 1 (length args)))
        (let [workload (-> (/opt/resource/in
                             {:source source
                              :version (first args)})
                           (with-args ./)
                           (on-platform platform)
                           (in-image image))]
          (assoc (next (run workload))
                 :resource (path workload ./)))

      (and (= cmd .get) (= 2 (length args)))
        (let [workload (-> (/opt/resource/in
                             {:source source
                              :version (first args)
                              :params (second args)})
                           (with-args ./)
                           (on-platform platform)
                           (in-image image))]
          (assoc (next (run workload))
                 :resource (path workload ./)))

      (and (= cmd .put) (= 1 (length args)))
        (next (run (-> (/opt/resource/out
                         {:source source
                          :params params})
                       (with-args ./)
                       (on-platform platform)
                       (in-image image))))

      :else
        unknown-cmdline)))

(def linux {:os "linux"})

(def booklit
  (resource linux
            {:repository "concourse/git-resource"}
            {:uri "https://github.com/vito/booklit"}))

(def golang
  (resource linux
            {:repository "concourse/registry-image-resource"}
            {:repository "golang"}))

(defn get-latest [r . kwargs]
  (let [latest-version (last (r .check))
        params (apply assoc [{} . kwargs])]
    (:resource (apply r [.get latest-version params]))))

(defn image-resource [resource]
  (let [fetched (get-latest resource :format "oci")]
    fetched/image.tar))

(let [latest-booklit (get-latest booklit)
      build-docs (-> ($ latest-booklit/scripts/build-docs $latest-booklit)
                     (in-image (image-resource golang))
                     (on-platform linux)
                     (response-from :exit))]
  (run build-docs)
  (export (path build-docs ./docs/) /tmp/built-docs/))
