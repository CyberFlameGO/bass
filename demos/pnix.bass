(def nixos
  (from (linux/nixos/nix)
    ; for nix show-derivation
    ($ sh -c "echo experimental-features = nix-command >> /etc/nix/nix.conf")))

(defn instantiate [nix]
  (from nixos
    ($ nix-instantiate $nix)))

(defn derivations [store path]
  (-> ($ nix show-derivation --recursive $path)
      (with-image store)
      (read :json)
      next))

(defn package? [drv]
  (-> drv :env (:pname null)))

(defn pkg-image [drvs depth]
  (fn [pkg-drv]
    (from (if (= depth 0)
            nixos
            (derivation-image drvs pkg-drv (- depth 1)))
      ($ nix-env --install (-> pkg-drv :env :name)))))

; like -> but passes the value as the last arg instead
(defop ->> [x f & fs] scope
  (let [v (if (pair? f)
            (conj f x)
            [f x])]
    (if (empty? fs)
      (eval v scope)
      (eval [->> v & fs] scope))))

(defn inputs [drvs drv]
  (map (fn [key] (key drvs))
       (-> drv :inputDrvs keys)))

(defn derivation-image [drvs drv depth]
  (->> (inputs drvs drv)

       ; we only care about packages
       (filter package?)

       ; map each package to an image which installs its derivations
       (map (fn [pkg-drv]
              (from (if (= depth 0)
                      nixos
                      (derivation-image drvs pkg-drv (- depth 1)))
                ($ nix-env --install (-> pkg-drv :env :name)))))

       ; nixos is the 'root' image for all others
       (cons nixos)))

(defn main []
  (let [inst (instantiate *dir*/example.nix)
        path (trim (next (read inst :raw)))
        drvs (derivations inst path)
        drv (string->symbol path)]
    (run
      (from (derivation-image drvs (drv drvs) 1)
        ($ nix-build *dir*/example.nix)))))
